<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

			<!-- <beans:bean	id="dataSource" 
            class="org.apache.commons.dbcp.BasicDataSource"
			p:driverClassName="oracle.jdbc.OracleDriver"
			p:url="jdbc:oracle:thin:@127.0.0.1:1521:xe"
			p:username="scott" p:password="tiger"  
			p:maxActive="10"/> --> <!-- maxActive : 최대 10개의 커넥션을 미리 만들어 놓겠다 -->
<!--
 위처럼 빈을 만들어 하는 것보다는 properties 파일에 db에 관한 정보들을 미리 저장해 놓고,
이를 불러와서 사용하는 것이 더 좋다. (아래를 참고)
-->
	
	 <!-- 외부설정문서(properties파일) 가져오기 -->
	<beans:bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
  		<beans:property name="locations"><!-- setLocations()호출 -->
    		<beans:value>/WEB-INF/spring/appServlet/dbInfo.properties</beans:value>
  		</beans:property>
	</beans:bean>

	<!-- oracle 연결!!!!! -->
	<beans:bean	id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
				p:driverClassName="${driverName}"
				p:url="${url}"
				p:username="${userName}"
				 p:password="${userPass}"  
				 p:maxActive="10"/>
				 
	<!-- SqlSessionFactoryBean 설정하기!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
 	
	<!-- <beans:bean id="sqlSessionFactory"
	       class="org.mybatis.spring.SqlSessionFactoryBean"
			p:dataSource-ref="dataSource" 
			p:configLocation="classpath:kdb/spring/conf/SqlMapConfig.xml"
	/>  -->
	<!-- 이 방식은 SqlMapConfig.xml 파일을 만들어서 해야하지만 아래의 방식은 이를 개선 -->
 
			
	<!-- SqlSessionFactoryBean : SqlSessionFactory를 spring에서 미리 만들어서 제공하는 역할 -->
    <beans:bean id="sqlSessionFactory" 
    class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="mapperLocations" value="classpath:mapper/*Mapper.xml" /><!--  Mapper.xml 로끝나는 mppter모두 등록 -->
		<beans:property name="typeAliasesPackage" value="spring.web.dto" /><!-- dto폴더안에있는 클래스들 별칭 자동만듦 - 클래스명의 첫글만 소문자!! -->
	 </beans:bean>
	
	 <!-- 
		SqlSessionTemplate : SqlSessionFactoryBean으로부터 SqlSession을 얻어오는 역할
		자바코드 상에서 가져다 사용하면됨
	 -->
 	 <beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg index="0" ref="sqlSessionFactory"/>
	 </beans:bean>
	
	<!-- ~~~~~~~~~~~~~~~~~~~spring에서 mybatis 사용하기 완료~~~~~~~~~~~~~~~~~~~ -->
	
	<!-- spring tx를 위한 스키마 설정 -->
	<beans:bean	id="transactionManager"
	 class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
				p:dataSource-ref="dataSource" />
	
	<!-- <tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method  name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>

	 <aop:config>
		<aop:advisor advice-ref="txAdvice" pointcut="execution(public * spring.web.service.*.*(..))" />
	</aop:config> -->
	
	<!-- spring transaction annotaion설정 -->
	 <tx:annotation-driven transaction-manager="transactionManager"/>

	</beans:beans>